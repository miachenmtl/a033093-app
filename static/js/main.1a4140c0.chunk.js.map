{"version":3,"sources":["serviceWorker.js","index.js","App.js","hooks.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","_useFetch","url","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","loading","setLoading","fetchUrl","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","text","dataArray","dataObj","i","row","wrap","_context","prev","next","fetch","sent","split","x","y","length","push","stop","_x","apply","this","arguments","useEffect","useFetch","_useFetch2","Fragment","react_plotly_default","style","width","height","type","mode","marker","size","color","useResizeHandler","layout","autosize","title","plot_bgcolor","paper_bgcolor","hovermode","dragmode","font","family","config","scrollZoom","displayModeBar","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cCDD,WAAe,IAAAC,ECF9B,SAAkBC,GAAK,IAAAC,EACGC,mBAAS,IADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdK,EADcH,EAAA,GACRI,EADQJ,EAAA,GAAAK,EAESN,oBAAS,GAFlBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEdE,EAFcD,EAAA,GAELE,EAFKF,EAAA,GAGfG,EAAQ,eAAAC,EAAAT,OAAAU,EAAA,EAAAV,CAAAW,EAAAlB,EAAAmB,KAAG,SAAAC,EAAOjB,GAAP,IAAAkB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAlB,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQC,MAAM5B,GADd,cACTkB,EADSO,EAAAI,KAAAJ,EAAAE,KAAA,EAEIT,EAASC,OAFb,OAQf,IANMA,EAFSM,EAAAI,KAGXT,EAAYD,EAAKW,MAAM,MACvBT,EAAU,CACZU,EAAG,GACHC,EAAG,IAEIV,EAAI,EAAGA,EAAIF,EAAUa,OAAQX,GAAK,EACrCC,EAAMH,EAAUE,GAAGQ,MAAM,KAC7BT,EAAQU,EAAEG,KAAKX,EAAI,IACnBF,EAAQW,EAAEE,KAAKX,EAAI,IAErBhB,EAAQc,GACRV,GAAW,GAdI,yBAAAc,EAAAU,SAAAlB,MAAH,gBAAAmB,GAAA,OAAAvB,EAAAwB,MAAAC,KAAAC,YAAA,GAmBd,OAHAC,oBAAU,WACR5B,EAASZ,IACR,CAACA,IACG,CAACM,EAAMI,GDnBU+B,CACtB,cAF0BC,EAAAtC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GACrBO,EADqBoC,EAAA,GACfhC,EADegC,EAAA,GAI5B,OACE9C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8C,SAAA,KACGjC,EACCd,EAAAC,EAAAC,cAAA,WACG,qCAGHF,EAAAC,EAAAC,cAAC8C,EAAA/C,EAAD,CACEgD,MAAO,CAAEC,MAAO,QAASC,OAAQ,SACjCzC,KAAM,CACJ,CACEyB,EAAGzB,EAAKyB,EACRC,EAAG1B,EAAK0B,EACRgB,KAAM,YACNC,KAAM,UACNC,OAAQ,CACNC,KAAM,EACNC,MAAO,aAIbC,kBAAgB,EAChBC,OAAQ,CACNC,UAAU,EACVC,MAAO,8BACPC,aAAc,UACdC,cAAe,UACfC,UAAW,UACXC,SAAU,MACVC,KAAM,CACJC,OAAQ,yBACRX,KAAM,GACNC,MAAO,YAGXW,OAAQ,CACNC,YAAY,EACZC,gBAAgB,ODxCZ,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a4140c0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport Plot from 'react-plotly.js';\n\nimport { useFetch } from \"./hooks\";\n\nexport default function App() {\n  const [data, loading] = useFetch(\n    \"result.csv\"\n  );\n  return (\n    <>\n      {loading ? (\n        <div>\n          {'Loading. This may take a while...'}\n        </div>\n      ) : (\n        <Plot\n          style={{ width: '100vw', height: '100vh' }}\n          data={[\n            {\n              x: data.x,\n              y: data.y,\n              type: 'scattergl',\n              mode: 'markers',\n              marker: {\n                size: 2,\n                color: '#59234F'\n              },\n            }\n          ]}\n          useResizeHandler\n          layout={{\n            autosize: true,\n            title: 'A033093 for n = 1 - 1000000',\n            plot_bgcolor: '#0A172A',\n            paper_bgcolor: '#0A172A',\n            hovermode: 'closest',\n            dragmode: 'pan',\n            font: {\n              family: 'Courier New, monospace',\n              size: 18,\n              color: '#03B5AA',\n            }\n          }}\n          config={{\n            scrollZoom: true,\n            displayModeBar: false,\n          }}\n        />\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\n\n// Thank you https://medium.com/@cwlsn/how-to-fetch-data-with-react-hooks-in-a-minute-e0f9a15a44d6\nfunction useFetch(url) {\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const fetchUrl = async (url) => {\n    const response = await fetch(url);\n    const text = await response.text();\n    let dataArray = text.split('\\n');\n    let dataObj = {\n      x: [],\n      y: []\n    }\n    for (let i = 0; i < dataArray.length; i += 1) {\n      let row = dataArray[i].split(',');\n      dataObj.x.push(row[0]);\n      dataObj.y.push(row[1]);\n    }\n    setData(dataObj);\n    setLoading(false);\n  }\n  useEffect(() => {\n    fetchUrl(url);\n  }, [url]);\n  return [data, loading];\n}\nexport { useFetch };\n"],"sourceRoot":""}